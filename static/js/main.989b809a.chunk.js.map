{"version":3,"sources":["components/xmlValitator.jsx","App.js","reportWebVitals.js","index.js"],"names":["XmlComponent","useState","XML","setXML","newXML","setNewXML","complexXML","setComplexXML","newComplexXML","setNewComplexXML","getXML","fetch","then","response","text","data","xml","DOMParser","parseFromString","document","getElementById","textContent","list","users","getElementsByTagName","i","length","names","li","createElement","j","childNodes","nodeValue","appendChild","xmlData","chat","user","createTextNode","content","timezone","time","Date","toISOString","name","xhttp","XMLHttpRequest","endpoint","open","onreadystatechange","readyState","status","res","alert","setRequestHeader","send","sendXML","newUsers","xmlText","XMLSerializer","serializeToString","processFile","getXMLOrXSD","str","window","JSON","parse","convert","xml2json","compact","ignoreAttributes","spaces","json","xmlString","processXMLDFile","json2xml","onClick","e","className","readOnly","id","lang","rows","cols","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.989b809a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport \"../index.css\";\nimport XMLViewer from 'react-xml-viewer'\nimport convert from 'xml-js';\n///const convert = require('xml-js');\n\nconst XmlComponent = () => {\n    const [XML, setXML] = useState('');\n    const [newXML, setNewXML] = useState('');\n    const [complexXML, setComplexXML] = useState('');\n    const [newComplexXML, setNewComplexXML] = useState('');\n\n    /*** Retreive XML File */\n    function getXML() {\n        let url = 'https://hugoapgarcia.github.io/structure/user.xml';\n        fetch(url)\n            .then(response => response.text())\n            .then(data => {\n                //console.log(data);  //string\n                let parser = new DOMParser();\n                let xml = parser.parseFromString(data, \"application/xml\");\n                //document.getElementById('output').textContent = data;\n                setXML(data);\n                //console.log(xml);\n\n                //read xml\n                xmlData(xml)\n\n                //process xml\n                processFile(xml)\n\n            });\n\n    }\n\n    /*** Example of how to display values of xml from response */\n    function xmlData(xml) {\n        document.getElementById('users').textContent = '';\n\n        let list = document.getElementById('users');\n        let users = xml.getElementsByTagName(\"user\");\n\n        for (let i = 0; i < users.length; i++) {\n            let user = users[i];\n            let names = user.getElementsByTagName(\"name\");\n\n            let li = document.createElement('li');\n\n            for (let j = 0; j < names.length; j++) {\n                //alert(names[j].childNodes[0].nodeValue);\n                li.textContent = names[j].childNodes[0].nodeValue;\n                list.appendChild(li);\n            }\n        }\n    }\n\n    /*** Example of how to send new xml to specific endpoint */\n    function sendXML(xml, name) {\n        const xhttp = new XMLHttpRequest();\n        let endpoint = '';\n        xhttp.open(\"POST\", endpoint);\n        xhttp.onreadystatechange = () => {\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\n                const res = xhttp.response;\n                alert(`${res}: ${name}`);\n            }\n        };\n        xhttp.setRequestHeader(\"Content-Type\", \"text/xml\");\n        xhttp.send(xml);\n\n    }\n    /*** Example of how to process file, adding new values to existin xml from response */\n    function processFile(data) {\n        var chat = data.createElement(\"user\");\n\n        var user = data.createElement(\"id\");\n        user.appendChild(data.createTextNode(\"1\"));\n\n        var content = data.createElement(\"name\");\n        content.appendChild(data.createTextNode(\"Karla\"));\n\n        var timezone = data.createElement(\"date\");\n        let time = new Date().toISOString();\n        timezone.appendChild(data.createTextNode(time));\n\n        chat.appendChild(user);\n        chat.appendChild(content);\n        chat.appendChild(timezone);\n\n        data.getElementsByTagName(\"users\")[0].appendChild(chat);\n\n        //check the updated new XML\n        //console.log(data); \n        sendXML(data, 'newXML');\n\n        // showing updated users\n        let newUsers = data.getElementsByTagName(\"users\")[0];\n        let xmlText = new XMLSerializer().serializeToString(newUsers)\n        //document.getElementById('output-2').textContent = xmlText;\n        setNewXML(xmlText);\n    }\n\n\n    /*** Retreive XSD File */\n    function getXMLOrXSD() {\n        let url = 'https://hugoapgarcia.github.io/structure/registration.xsd';\n\n        fetch(url)\n            .then(response => {\n                return response.text()\n            }).then(str => {\n                //console.log(str);\n                //document.getElementById('outputxsd').textContent = str;\n                setComplexXML(str)\n\n                // parse string\n                return (new window.DOMParser()).parseFromString(str, \"text/xml\")\n            }).then(xml => {\n                //console.log(xml);\n                let xmlData = new XMLSerializer().serializeToString(xml);\n                \n                // convert xml object to json.\n                // pass optiom to lib : [compact, ignoreAttributes, spaces]\n                const options = { compact: true, ignoreAttributes: true, spaces: 4 };\n                let refactoredJson = JSON.parse(convert.xml2json(xmlData, options));\n\n                return refactoredJson;\n            }).then(json => {\n                // json is now available\n                //console.log(json)\n\n                const xml = convert.json2xml(json, {\n                    compact: true\n                });\n\n                processXMLDFile(xml)\n            });\n\n\n    }\n\n    /*** Example of how to process file, adding new values to existin xml from response */\n    function processXMLDFile(data) {\n        let parser = new DOMParser();\n        let xml = parser.parseFromString(data, \"application/xml\");\n\n        let title = xml.getElementsByTagName('title');\n        title[0].textContent = 'Engineer'\n\n\n\n        let xmlString = new XMLSerializer().serializeToString(xml);\n        setNewComplexXML(xmlString);\n        //document.getElementById('outputxsd2').textContent = xmlString\n\n\n\n\n        // var chat = data.createElement(\"user\");\n\n        // var user = data.createElement(\"id\");\n        // user.appendChild(data.createTextNode(\"1\"));\n\n        // var content = data.createElement(\"name\");\n        // content.appendChild(data.createTextNode(\"Karla\"));\n\n        // var timezone = data.createElement(\"date\");\n        // let time = new Date().toISOString();\n        // timezone.appendChild(data.createTextNode(time));\n\n        // chat.appendChild(user);\n        // chat.appendChild(content);\n        // chat.appendChild(timezone);\n\n        // data.getElementsByTagName(\"users\")[0].appendChild(chat);\n\n        // console.log(data); //check the updated new XML\n        // sendXML(data, 'newXML');\n\n        // // showing updated users\n        // let newUsers = data.getElementsByTagName(\"users\")[0];\n        // let xmlText = new XMLSerializer().serializeToString(newUsers)\n        // document.getElementById('output-2').textContent = xmlText;\n\n    }\n\n\n\n    return (<>\n        <button onClick={(e) => getXML(e)}>Get & Update XML</button>\n        <h3>Description:</h3>\n        <p>Click event will be displaying current XML file retrives as List of usernames or any other item. Also will be executting an updated XML ready to be send to a\n            specific endpoint url. Open Dev Tool and Conosole to see the updated XML.\n        </p>\n        <h3>XML DATA:</h3>\n        <div className=\"xml-box\">\n            <div className=\"child\">\n                <h2>Current XML Response :</h2>\n                <textarea readOnly id=\"output\" lang=\"xml\" rows=\"30\" cols=\"55\" value={XML}></textarea>\n            </div>\n            <div className=\"child\">\n                <h2>Updated XML</h2>\n                <XMLViewer className='newXmlbox' xml={newXML} />\n            </div>\n            <div className=\"interaction\">\n                <h1>INTERACTION WITH XML:</h1>\n                <p>Iterate in xml file to display only user-names in HTML.</p>\n                <ul id=\"users\"></ul>\n            </div>\n        </div>\n        <hr />\n        <button onClick={(e) => getXMLOrXSD(e)}>Get XSD & Create Valid XML from Schema</button>\n        <h1>PROCESING XSD DATA:</h1>\n        <div className=\"xml-box\">\n            <div className=\"child\">\n                <h2>Current XML Schema (XSD) Response :</h2>\n                <textarea readOnly id=\"outputxsd\" lang=\"xml\" rows=\"30\" cols=\"55\" value={complexXML}></textarea>\n            </div>\n            <div className=\"child\">\n                <h2>Generated Valid XML :</h2>\n                <XMLViewer className='newXmlbox' xml={newComplexXML} />\n\n            </div>\n        </div>\n    </>\n    )\n\n}\n\nexport default XmlComponent;","import './App.css';\n\nimport XmlComponent from './components/xmlValitator';\n\n\nfunction App() {\n  return (\n    <XmlComponent/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}